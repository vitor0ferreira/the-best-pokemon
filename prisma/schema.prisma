// prisma/schema.prisma

datasource db {
  provider = "postgresql" // Ou "mysql", "sqlite", etc.
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  votes         Vote[]
  lastVoteDate  DateTime?
  votesToday    Int       @default(0)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Pokemon {
  id    Int      @id
  name  String   @unique
  types String[] // Armazena uma lista de tipos
  votes Int      @default(0)
  Vote  Vote[]
}

model Vote {
  id        String   @id @default(cuid())
  userId    String
  pokemonId Int
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  pokemon Pokemon @relation(fields: [pokemonId], references: [id])
}